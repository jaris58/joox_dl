import argparse
import configparser
import json
import os
import sys

import music_tag
import requests
from tqdm import tqdm

# pyinstaller --onefile --icon=logo.ico .\joox_dl.py
m4a = None
high_quality = None
counter = 0

configName = 'joox_dl.cfg'

if getattr(sys, 'freeze', False):
    applicationPath = os.path.dirname(sys.executable)
else:
    applicationPath = os.path.dirname(__file__)

configPath = os.path.join(applicationPath, configName)
configParser = configparser.RawConfigParser()
configParser.read(configPath)


# download funtion
def download_url(url, output_path):
    # url = "http://www.ovh.net/files/10Mb.dat" #big file test
    # Streaming, so we can iterate over the response.
    r = requests.get(url, stream=True)
    # Total size in bytes.
    total_size = int(r.headers.get('content-length', 0))
    block_size = 1024  # 1 Kibibyte
    t = tqdm(total=total_size, unit='iB', unit_scale=True, desc=f'Downloading - {output_path}')
    with open(output_path, 'wb') as f:
        for data in r.iter_content(block_size):
            t.update(len(data))
            f.write(data)
    t.close()
    if total_size != 0 and t.n != total_size:
        return False
    return True


# clean value from restricted symbol create folder name etc.
def clean_text(text_raw):
    return text_raw.replace('?', '').replace('\'', '').replace('\"', '').replace(':', '').replace('®', '')\
        .replace('ñ', 'n').replace('Ã±', 'n').replace('/', '-').replace('|', '-')


def get_track(song_id, album_name=None):
    with requests.Session() as s:
        s.get(
            "https://api.joox.com/web-fcgi-bin/web_wmauth?country=id&lang=id&wxopenid=" +
            configParser.get('login', 'wxopenid') + "&password=" +
            configParser.get('login', 'password') +
            "&wmauth_type=0&authtype=2&time=1598864049294&_=1598864049295&callback=axiosJsonpCallback4")
        url_track = "http://api.joox.com/web-fcgi-bin/web_get_songinfo?songid=" + song_id

        r = s.get(url_track)

        data_track_raw = r.text
        data_track_raw = data_track_raw[data_track_raw.find("(") + 1:-1]

        data_track = json.loads(data_track_raw)

        if data_track['msg'] == "invaid cookie":
            print("Invalid cookie.")
            sys.exit(0)

        data_track['msong'] = clean_text(data_track['msong'])

        url_additional_data_track = s.get(
            "https://api-jooxtt.sanook.com/page/single?"
            "regionURI=id-id&country=id&lang=id&id=YEPkJhasS%2B3KfmC1kyEEag%3D%3D&device=desktop")
        additional_data_track = json.loads(url_additional_data_track.text)
        additional_data_track = additional_data_track['single']

        if m4a:
            link_track = data_track['m4aUrl']
        elif high_quality and data_track['has_hq']:
            link_track = data_track['r320Url']
        else:
            link_track = data_track['mp3Url']

        file_type = link_track.split('?')
        file_type = file_type[0].split('.')
        file_type = file_type[-1]

        global counter
        counter += 1
        file_name = data_track['msong'] + '.' + file_type

        if album_name:
            file_name = str(counter).zfill(2) + '. ' + file_name
            folder_path = 'music/' + album_name
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)
            full_path = 'music/' + album_name + '/' + file_name
        else:
            folder_path = 'music'
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)
            full_path = 'music/' + file_name

        if download_url(link_track, full_path):
            audiofile = music_tag.load_file(full_path)
            audiofile['artist'] = data_track['msinger']
            audiofile['album'] = data_track['malbum']
            audiofile['albumartist'] = data_track['msinger']
            audiofile['tracktitle'] = data_track['msong']
            audiofile['genre'] = additional_data_track['genre']
            audiofile['year'] = str(additional_data_track['release_time'])
            audiofile['comment'] = 'Generated By j4r1s'
            if additional_data_track['lrc_exist'] == 1:
                audiofile['lyrics'] = additional_data_track['lrc_content']

            if data_track['imgSrc'] != "":
                response_img = s.get(data_track['imgSrc'])
                audiofile['artwork'] = response_img.content

            audiofile.save()

        return data_track


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--playlist', help='Playlist ID ex. (db1J7YbWZ1LectFJqPzd5g==)')
    parser.add_argument('-a', '--album', help='Album ID ex. (fnIkeDK++hFXaAzg7s9Etg==)')
    parser.add_argument('-s', '--song', help='Song ID ex. (TtEH_iaoAGl1dh5KsV44pg==)')
    parser.add_argument('-ar', '--artist', help='Artist ID ex. (oPx7SaQaTLhpqJP1zpTSpQ==)')
    parser.add_argument('-hq', '--highquality', help='High quality', action='store_true')
    parser.add_argument('-m4a', '--m4a', help='M4A Type', action='store_true')
    args = parser.parse_args()
    playlist_encode = vars(args)['playlist']
    album_encode = vars(args)['album']
    song_encode = vars(args)['song']
    artist_encode = vars(args)['artist']
    global high_quality
    high_quality = vars(args)['highquality']
    global m4a
    m4a = vars(args)['m4a']

    if playlist_encode:
        uri = "https://api-jooxtt.sanook.com/openjoox/v1/playlist/" + \
              playlist_encode + "/tracks?country=id&lang=id&index=0&num=50"
    elif album_encode:
        uri = "https://api-jooxtt.sanook.com/openjoox/v1/album/" + \
              album_encode + "/tracks?country=id&lang=id&index=0&num=50"
    elif artist_encode:
        uri = "https://api-jooxtt.sanook.com/page/artistDetail?id=" + \
              artist_encode + "&lang=id&country=id"
    elif song_encode:
        uri = "single"
    else:
        uri = None

    if uri is None:
        parser.print_help()
        parser.exit()

    else:
        if song_encode:
            # downloading track
            song = get_track(song_encode)
            print(song['msong'] + ' - Selesai!')
        elif artist_encode:
            r = requests.get(uri)
            data = r.json()
            album_name = clean_text(data['artistInfo']['name'])

            for item in data['artistTracks']['tracks']['items']:
                # downloading track
                get_track(item['id'], album_name)

                # break
            print(album_name + ' : ' + str(data['artistTracks']['tracks']['list_count']) + ' lagu.' + ' - Selesai!')
        else:
            # fecthing track
            r = requests.get(uri)
            data = r.json()

            for item in data['tracks']['items']:
                # downloading track
                album_name = clean_text(data['name'])
                get_track(item['id'], album_name)

                # break
            print(data['name'] + ' : ' + str(data['tracks']['list_count']) + ' lagu.' + ' - Selesai!')


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)
    except requests.ConnectionError as e:
        print("OOPS!! Connection Error. Make sure you are connected to Internet. Technical Details given below.\n")
        print(str(e))
    except requests.Timeout as e:
        print("OOPS!! Timeout Error")
        print(str(e))
    except requests.RequestException as e:
        print("OOPS!! General Error")
        print(str(e))
